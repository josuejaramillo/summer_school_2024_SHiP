import numpy as np
from numba import jit, njit, prange
from numpy.random import random, uniform, choice
from externalFunction3BD import *
import HNLmerging

# @njit
# def pPar(En, mn):
#     return np.sqrt(En**2 - mn**2)

@njit
def E2valEnergies(m, E1, E3):
    return m - E1 - E3

# @njit
# def cosTheta12(E1, E3, m, m1, m2, m3):
#     pE1 = pPar(E1, m1)
#     pE2 = pPar(E2valEnergies(m, E1, E3), m2)
#     pE3 = pPar(E3, m3)
#     return (pE3**2 - pE1**2 - pE2**2) / (2 * pE1 * pE2)

# @njit
# def cosTheta13(E1, E3, m, m1, m2, m3):
#     pE1 = pPar(E1, m1)
#     pE2 = pPar(E2valEnergies(m, E1, E3), m2)
#     pE3 = pPar(E3, m3)
#     return (pE2**2 - pE1**2 - pE3**2) / (2 * pE1 * pE3)

# # Matrix rotating the 3-vectors around the z-axis
# # @njit
# def phiRotMatrix(phi):
#     return np.array([[np.cos(phi), np.sin(phi), 0], [-np.sin(phi), np.cos(phi), 0], [0, 0, 1]])

# # Matrix rotating the 3-vectors around the x-axis
# # @njit
# def thetaRotMatrix(theta):
#     return np.array([[1, 0, 0], [0, np.cos(theta), np.sin(theta)], [0, -np.sin(theta), np.cos(theta)]])

# # @njit
# # def pvecRotated(px, py, pz, thetaV, phiV):
# #     vec = np.array([px, py, pz])
# #     return phiRotMatrix(phiV).dot(thetaRotMatrix(thetaV)).dot(vec)
# @njit
# def pvecRotated(px, py, pz, thetaV, phiV):
#     vec = np.array([px, py, pz])
#     theta_matrix = thetaRotMatrix(thetaV)
#     phi_matrix = phiRotMatrix(phiV)
#     return phi_matrix.dot(theta_matrix.dot(vec))

# @njit
# def block_random_energies_old(m, m1, m2, m3):
#     while True:
#         E3r = uniform(m3, (m**2 + m3**2 - (m1 + m2)**2) / (2 * m))
#         E1r = uniform(m1, (m**2 + m1**2 - (m2 + m3)**2) / (2 * m))
#         E2v = m - E1r - E3r
#         if E2v > m2 and (E2v**2 - m2**2 - (E1r**2 - m1**2) - (E3r**2 - m3**2))**2 < 4 * (E1r**2 - m1**2) * (E3r**2 - m3**2):
#             break
#     return np.array([E1r, E3r])

# @njit(parallel=True)
# def block_random_energies_old1(m, m1, m2, m3, Nevents):
#     return np.array([block_random_energies_old(m, m1, m2, m3) for _ in prange(Nevents)])

@njit
def block_random_energies_old(m, m1, m2, m3):
    while True:
        E3r = np.random.uniform(m3, (m**2 + m3**2 - (m1 + m2)**2) / (2 * m))
        E1r = np.random.uniform(m1, (m**2 + m1**2 - (m2 + m3)**2) / (2 * m))
        E2v = m - E1r - E3r
        if E2v > m2 and (E2v**2 - m2**2 - (E1r**2 - m1**2) - (E3r**2 - m3**2))**2 < 4 * (E1r**2 - m1**2) * (E3r**2 - m3**2):
            break
    return np.array([E1r, E3r])

@njit
def block_random_energies_old1(m, m1, m2, m3, Nevents):
    result = np.empty((Nevents, 2))  # Preallocate array with the right shape
    for i in prange(Nevents):
        result[i] = block_random_energies_old(m, m1, m2, m3)
    return result

def weights_non_uniform_comp(tabe1e3, MASSM, MASS1, MASS2, MASS3, distr):
    e1 = tabe1e3[0]
    e3 = tabe1e3[1]
    return distr(e1, e3)

def block_random_energies(m, m1, m2, m3, Nevents, distr):
    # Table of energies E_1, E_3 assuming unit matrix element.
    tabE1E3unweighted = block_random_energies_old1(m, m1, m2, m3, max(Nevents, 10**1))
    # Calculating the squared matrix element for these energies.
    weights1 = np.abs(np.array([weights_non_uniform_comp(e, m, m1, m2, m3, distr) for e in tabE1E3unweighted]))
    weights1 = np.where(weights1 < 0, 0, weights1)  # Ensure no negative weights
    tabsel_indeces = choice(len(tabE1E3unweighted), size=Nevents, p=weights1/weights1.sum())
    return tabE1E3unweighted[tabsel_indeces]

@njit
def tabPS3bodyCompiled(tabPSenergies, MASSM, MASS1, MASS2, MASS3, pdg1, pdg2, pdg3, charge1, charge2, charge3, stability1, stability2, stability3):
    # Random energies of particles 1, 3 in 3-body decay.
    eprod1 = tabPSenergies[0]
    eprod3 = tabPSenergies[1]
    # Random angles defining the orientations of the 3-momenta.
    thetaRand = np.arccos(uniform(-1, 1))
    phiRand = uniform(-np.pi, np.pi)
    kappaRand = uniform(-np.pi, np.pi)

    eprod2 = MASSM - eprod1 - eprod3

    # pE1 = pPar(eprod1, MASS1)
    # pE2 = pPar(E2valEnergies(MASSM, eprod1, eprod3), MASS2)
    # pE3 = pPar(eprod3, MASS3)

    # # Angles between particles 1, 2 and 1, 3 defined in terms of the energies.
    # cosTheta12_val = cosTheta12(eprod1, eprod3, MASSM, MASS1, MASS2, MASS3)
    # sinTheta12_val = np.sqrt(1.0 - cosTheta12_val**2)
    # cosTheta13_val = cosTheta13(eprod1, eprod3, MASSM, MASS1, MASS2, MASS3)
    # sinTheta13_val = np.sqrt(1.0 - cosTheta13_val**2)

    # sinTheta12_sinKappa = sinTheta12_val * np.sin(kappaRand)
    # sinTheta12_cosKappa = sinTheta12_val * np.cos(kappaRand)

    # # Rotated momenta for particle 1
    # pxprod1, pyprod1, pzprod1 = pvecRotated(0, 0, pE1, thetaRand, phiRand)

    # # Rotated momenta for particle 2
    # pxprod2, pyprod2, pzprod2 = pvecRotated(
    #     pE2 * sinTheta12_sinKappa,
    #     pE2 * sinTheta12_cosKappa,
    #     pE2 * cosTheta12_val,
    #     thetaRand, phiRand
    # )

    # # Rotated momenta for particle 3
    # pxprod3, pyprod3, pzprod3 = pvecRotated(
    #     -pE3 * sinTheta13_val * np.sin(kappaRand),
    #     -pE3 * sinTheta13_val * np.cos(kappaRand),
    #     pE3 * cosTheta13_val,
    #     thetaRand, phiRand
    # )

    return np.array([pxprod1, pyprod1, pzprod1, eprod1, MASS1, pdg1, charge1, stability1,
                     pxprod2, pyprod2, pzprod2, eprod2, MASS2, pdg2, charge2, stability2,
                     pxprod3, pyprod3, pzprod3, eprod3, MASS3, pdg3, charge3, stability3])

def three_body_decays_events_at_rest(particle, SpecificDecay, mparticle, Nevents, external_funcs):
    ParamProductMass, PDGcodes, ParamProductCharge, ParamProductStability, Msquared3BodySMparticles, Msquared3BodyLLP, LLPdirName = external_funcs

    # MASSM = ParamProductMass(ParamProductToPDGid(particle)) if particle != LLPdirName else mparticle
    # decayproductsset = [p for p in ListDecayProducts(particle, SpecificDecay) if p != "Null"]

    # pdg1, pdg2, pdg3 = [ParamProductToPDGid(p) for p in decayproductsset]

    MASSM = mparticle

    pdg1, pdg2, pdg3 = PDGcodes(LLPdirName, SpecificDecay)

    MASS1, MASS2, MASS3 = [ParamProductMass(p) for p in [pdg1, pdg2, pdg3]]
    charge1, charge2, charge3 = [ParamProductCharge(p) for p in [pdg1, pdg2, pdg3]]
    stability1, stability2, stability3 = [ParamProductStability(p) for p in [pdg1, pdg2, pdg3]]

    # print(pdg1, pdg2, pdg3)
    # print(MASS1, MASS2, MASS3)
    # print(charge1, charge2, charge3)

    analysis = HNLmerging.HNLMerging("./Distributions/HNL", SpecificDecay)
    def distr(E1, E3):
        # return Msquared3BodySMparticles(particle, SpecificDecay, E1, E3, MASSM) if particle != LLPdirName else Msquared3BodyLLP(particle, SpecificDecay, E1, E3, MASSM)
        return Msquared3BodyLLP(analysis, SpecificDecay, E1, E3, MASSM)

    tabE1E3true = block_random_energies(MASSM, MASS1, MASS2, MASS3, Nevents, distr)
    print(tabE1E3true)
    return np.array([tabPS3bodyCompiled(e, MASSM, MASS1, MASS2, MASS3, pdg1, pdg2, pdg3, charge1, charge2, charge3, stability1, stability2, stability3) for e in tabE1E3true])

# Example usage:
# external_funcs = (ParamProductMass, ParamProductToPDGid, ListDecayProducts, ParamProductCharge,
# ParamProductStability, Msquared3BodySMparticles, Msquared3BodyLLP, LLPdirName)
# result = three_body_decays_events_at_rest(particle, SpecificDecay, mparticle, Nevents, external_funcs)

external_funcs = (ParamProductMass, PDGcodes, ParamProductCharge,
                   ParamProductStability, Msquared3BodySMparticles, Msquared3BodyLLP, "./Distributions/HNL/HNL-decay.json")

result = three_body_decays_events_at_rest("HNL", "2ev", 1, 1, external_funcs)
print(result)
